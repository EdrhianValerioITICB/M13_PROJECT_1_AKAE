#Security
app.security.jwt.secret=K3lF7QAspsGG09mbIaryP3jtRkkxC5pwTV6BtM4kU5EXYRDEkMM9dUdjlpjPrEWYM
app.security.jwt.expiration=86400
#Searching why is giving error 403 in securityConfig class
logging.level.org.springframework.security=DEBUG

#h2 database
#spring.datasource.url=jdbc:h2:file:~/spring-boot-h2-db;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.username=sa
#spring.datasource.password=
#spring.datasource.driver-class-name=org.h2.Driver
#spring.sql.init.platform=h2
#spring.h2.console.path=/h2-console
#spring.h2.console.enabled=true

#Configuracion del JPA
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.defer-datasource-initialization=true
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.generate-ddl=true
#spring.sql.init.mode=always

#server.port=8081
# en vez de utilizar localhost utilizamos el nombre del contenedor docker
#spring.datasource.url=jdbc:postgresql://postgres:5432/spring_db
#spring.datasource.username=postgres
#spring.datasource.password=admin
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

#server.port=8081
# en vez de utilizar localhost utilizamos el nombre del contenedor docker
spring.datasource.url=jdbc:postgresql://postgres:5432/spring_db
spring.datasource.username=postgres
spring.datasource.password=admin
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
